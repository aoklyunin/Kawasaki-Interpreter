.PROGRAM empty()

.END

.PROGRAM m()
	;управл€ющие программы от компьютера
	C_STOP = 4; // остановка
	C_J = 5; // относительный поворот одного оклена
 	C_GetPositionAxis = 6; // положение в поворотах
	C_GetPosition = 7; // положение в ос€х
	C_J_POINT = 8; // управление по координатам
	C_D_POINT = 9; // управление по окординатам
	C_HOME1 = 10; //выход в домашнюю зону 1
	C_HOME2 = 11;// выход в домашнюю зону 2
	C_ERR = 12; // ошибка
	c_draw  = 13; //смещение
	C_SET_POS = 14; //задание по почте
	C_SET_DELTA_POS = 15; // задание на смещение на условную единицу
	C_DELTA_POS_ENABLE = 16; // разрешаем смещение на условную единицу
	C_DELTA_POS_DISABLE = 17; // запрещаем смещение на условную единицу
	C_SENSOR_VALS = 18; // значени€ с сенсора
	C_START_GRAVITY = 19; // включить программу гравитации
	C_STOP_GRAVITY = 20; // выключить программу гравитации
	
	; идентификаторы алгоритмов управлени€
	A_NULL = 0 ; ничего не делать
	A_SET_CUR_POINT = 1 ; выход в точку
	A_SET_DELTA_POINT = 2 ; смещение по ос€м 
	A_GRAVITATION = 3 ; иммитаци€ гравитации
	
	
	err_inrange_j1 = 1; 
	err_inrange_j2 = 2;
	err_inrange_j3 = 4; 
	err_inrange_j4 = 8; 
	err_inrange_j5 = 16; 
	err_inrange_j6 = 32; 
	err_not_inrange = 32786; 
	
	zMax = -360
	algN = 0
	algP = 0

	max_point_diff = 5; 

	buffer[1,1] = 0
	port = 40000
	$temp = "";
	CALL open_socket; Connecting communication
	IF sock_id<0 THEN
		GOTO exit_end
	END
	text_id = 0
	
	netpos = 0
	circle = 0
	coordshift[1] = 0
	coordshift[2] = 0
	coordshift[3] = 0
	coordshift[4] = 0
	coordshift[5] = 0
	coordshift[6] = 0
	
	
	sensorVals[1] = 0
	sensorVals[2] = 0
	sensorVals[3] = 0
	sensorVals[4] = 0
	sensorVals[5] = 0
	sensorVals[6] = 0
	
	sensorLimits[1] = 100; x
	sensorLimits[2] = 100; y
	sensorLimits[3] = 100; z
	sensorLimits[4] = 100; tx
	sensorLimits[5] = 100; ty
	sensorLimits[6] = 100; tz
	
	sensorsMins[1] = 99999;
	sensorsMins[2] = 99999;
	sensorsMins[3] = 99999;
	sensorsMins[4] = 99999;
	sensorsMins[5] = 99999;
	sensorsMins[6] = 99999;
	
	POINT curpoint = HERE; 
	time = 1
	PCEXECUTE 1: recv,-1
	PCEXECUTE 2: writestats,-1
	
	posread = 0;
	poswrite = 0;
	sending_mode = 0
	movespeed = 15
	
	shiftspeed = 10;
	POINT shiftP = NULL
	
	deltaposenable = 0

	while 1==1 do
		if circle <> 0 then
			PRINT "Get exit command"	
			GOTO exit 
		else
			if pos_read <> pos_write then
		            .id   = buffer[pos_read,1]
		            .cmd  = buffer[pos_read,2]
		            .param = buffer[pos_read,3]
		            .vec1 = buffer[pos_read,4]
		            .vec2 = buffer[pos_read,5]
		            .vec3 = buffer[pos_read,6]
		            .vec4 = buffer[pos_read,7]
					.vec5 = buffer[pos_read,8]
		            .vec6 = buffer[pos_read,9]
					pos_read = pos_read + 1
    			    if pos_read == 1000 then
						pos_read = 1
					end
					call execution(.id,.cmd,.param,.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
        	end
			
				case algN of
				value A_SET_CUR_POINT:
					CALL curpointproc
				value A_SET_DELTA_POINT:
					CALL deltaposproc
				value A_GRAVITATION:
					CALL gravitationProc
				end	
			TWAIT 0.05
		end
	end;
exit:
	PRINT "Get exit"
	CALL close_socket
	PCABORT 1:
	PCABORT 2:
	PRINT "SOCKEC_CLOSED"
exit_end:
.END 

.PROGRAM gravitationProc
	.coordX = 0
	.coordY = 0
	.coordZ = 0
	if abs(sensorVals[1]-sensorsMins[1])> sensorLimits[1] then
		if sensorVals[1]>sensorsMins[1] then		
			.coordX = 1;
		else
			.coordX = -1 
		end
	end
	if abs(sensorVals[2]-sensorsMins[2])> sensorLimits[2] then
		if sensorVals[2]>sensorsMins[2] then		
			.coordY = 1;
		else
			.coordY = -1 
		end
	end
	if abs(sensorVals[3]-sensorsMins[3])> sensorLimits[3] then
		if sensorVals[3]>sensorsMins[3] then		
			.coordZ = -1;
		else
			.coordZ = 1 
		end
	end
	DRAW -.coordX,.coordY,.coordZ,0,0,0,20 MM/S
	PRINT -.coordX,"  ",.coordY,"  ",.coordZ
.END

.PROGRAM deltaposproc
	PRINT DISTANCE(DEST,HERE)
    if (algP <> 0) then
		if DISTANCE(DEST,HERE)<0.05
			algP = 0
		end
	else
		POINT shiftP = trans(coordshift[1],coordshift[2],coordshift[3],coordshift[4],coordshift[5],coordshift[6]);
		if DISTANCE(NULL,shiftP)>0  then
			DRAW coordshift[1],coordshift[2],coordshift[3],coordshift[4],coordshift[5],coordshift[6],shiftspeed MM/S
		end
		algP=1
	end
.end

.PROGRAM curpointproc()
	;DECOMPOSE .arr[1] = curPoint
	.k = DISTANCE(HERE,curpoint)
	IF (.k>5) THEN
		.e = INRANGE(curpoint)
		IF (.e>0) THEN
			sending_mode = 1
			CALL sendstring(0,c_err,.e,0,0,0,0,0,0);
			sending_mode = 0
		ELSE
			SPEED movespeed MM/S ALWAYS
			HMOVE curpoint
		END
	END
	;TWAIT 0.5
.END


.PROGRAM execution(.id,.cmd,.param,.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
	case .cmd of
	value C_J:
		if (.param<=0) then
			.jspeed = 1
		else
			.jspeed = .param
		end
		if .vec1<>0
			DRIVE 1,.vec1,.jspeed   
		end
		if .vec2<>0
			DRIVE 2,.vec2,.jspeed
		end
		if .vec3<>0
			DRIVE 3,.vec3,.jspeed
		end
		if .vec4<>0
			DRIVE 4,.vec4,.jspeed
		end
		if .vec5<>0
			DRIVE 5,.vec5,.jspeed
		end
		if .vec6<>0
			DRIVE 6,.vec6,.jspeed
		end
	value C_GetPositionAxis:
		HERE .#p
		DECOMPOSE .arr[1]=.#p
		while sending_mode == 1 do
		end
		sending_mode = 1
		call sendstring(0,C_GetPositionAxis,0,.arr[1],.arr[2],.arr[3],.arr[4],.arr[5],.arr[6])
		sending_mode = 0
	value C_J_POINT
		if (.param<=0) 
			.jspeed = 10
		else
			.jspeed = .param
		end
		SPEED .jspeed*3 MM/S,.jspeed DEG/S ALWAYS
		JMOVE #PPOINT(.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
	VALUE c_home1:
		IF (.param<=0) THEN
			.jspeed = 10
		ELSE
			.jspeed = .param
		END
		SPEED .jspeed*3 MM/S,.jspeed DEG/S ALWAYS
		HOME
	VALUE c_home2:
		IF (.param<=0) THEN
			.jspeed = 10
		ELSE
			.jspeed = .param
		END
		SPEED .jspeed MM/S,.jspeed DEG/S ALWAYS
		HOME 2
	VALUE c_d_point:
		POINT .p = TRANS(.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
		.e = INRANGE(.p)
		IF (.e>0) THEN
			sending_mode = 1
			CALL sendstring(0,c_err,.e,0,0,0,0,0,0);
			sending_mode = 0
		ELSE
			IF (.param<=0) THEN
				.jspeed = 10
			ELSE
				.jspeed = .param
			END
			SPEED .jspeed MM/S,.jspeed DEG/S ALWAYS
			HMOVE .p
		END
	VALUE c_draw:
		IF (.param<=0) THEN
			.jspeed = 10
		ELSE
			.jspeed = .param
		END
		DRAW .vec1,.vec2,.vec3,.vec4,.vec5,.vec6,.jspeed MM/S
	VALUE c_set_pos:
		POINT curpoint = TRANS(.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
		movespeed = .param
		algN = A_SET_CUR_POINT
	VALUE C_SET_DELTA_POS:	
		if (algN==A_NULL)
			IF (.param<=0) THEN
				shiftspeed = 10
			ELSE
				shiftspeed = .param
			END
			coordshift[1] = .vec1
			coordshift[2] = .vec2
			coordshift[3] = .vec3
			coordshift[4] = .vec4
			coordshift[5] = .vec5
			coordshift[6] = .vec6
			print "Get command to move delta"
		end
	VALUE C_DELTA_POS_ENABLE:	
		if (algN==A_NULL) then
			algN = A_SET_DELTA_POINT
			print "Get command to start delta"
		end
	VALUE C_DELTA_POS_DISABLE:
		if (algN==A_SET_DELTA_POINT) then
			algN = A_NULL
			coordshift[1] = 0
			coordshift[2] = 0
			coordshift[3] = 0
			coordshift[4] = 0
			coordshift[5] = 0
			coordshift[6] = 0
			print "Get command to stop delta"
		end
	Value C_SENSOR_VALS:
		sensorVals[1]=.vec1
		sensorVals[2]=.vec2
		sensorVals[3]=.vec3
		sensorVals[4]=.vec4
		sensorVals[5]=.vec5
		sensorVals[6]=.vec6
	Value C_START_GRAVITY:
		if(algN == A_NULL)
			if (.vec1<100) then
				algN = A_NULL
			else 
				if (.vec2<100) then
					algN = A_NULL
				else		
					sensorsMins[1] = sensorVals[1];
					sensorsMins[2] = sensorVals[2];
					sensorsMins[3] = sensorVals[3];
					sensorsMins[4] = sensorVals[4];
					sensorsMins[5] = sensorVals[5];
					sensorsMins[6] = sensorVals[6];
					algN = A_GRAVITATION
					SPEED 10 MM/S ALWAYS
					PRINT "GRAVITY STARTED"
				end
			end		
		end
	Value C_STOP_GRAVITY:
		if(algN == A_GRAVITATION)
			sensorsMins[1] = 99999;
			sensorsMins[2] = 99999;
			sensorsMins[3] = 99999;
			sensorsMins[4] = 99999;
			sensorsMins[5] = 99999;
			sensorsMins[6] = 99999;
			algN = A_NULL
			print "Get command to stop gravity"
		end
	any :
 		print "Number of command: ",.cmd
	end
.END


.PROGRAM writeStats
if circle<>1
	;PRINT "SEND STATS"
		HERE .#p
		DECOMPOSE .arr[1]=.#p
		while sending_mode == 1 do
		end
		sending_mode = 1
		call sendstring(0,C_GetPositionAxis,0,.arr[1],.arr[2],.arr[3],.arr[4],.arr[5],.arr[6])
		sending_mode = 0
		POINT .p = HERE
		DECOMPOSE .arr[1]=.p
		while sending_mode == 1 do
		end
		sending_mode = 1
		call sendstring(0,C_GetPosition,0,.arr[1],.arr[2],.arr[3],.arr[4],.arr[5],.arr[6])  
		sending_mode = 0
	TWAIT 0.5
end
.END


.PROGRAM sendstring(.id,.cmd,.param,.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
;Fullen des Sendstrings und verschicken

	.$send_buf[1] = ""
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.id)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.cmd)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.param)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec1)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec2)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec3)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec4)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec5)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec6)+" "
	.buf_n = 1
	.sret = 1
	TCP_SEND .sret,sock_id,.$send_buf[1],.buf_n,10
	IF .sret<0 THEN
		PRINT "Sending failed"
	END
.END



.PROGRAM open_socket() ;Starting communicatin 
	er_count =0 
listen:
	TCP_LISTEN .retl,port 
	IF .retl<0 THEN
		IF er_count >= 5 THEN
			PRINT "Connection with PC is failed (LISTEN). Program is stopped." 
			sockjd = -1 
			goto exit 
		ELSE
			er_count = er_count+1
			PRINT "TCPJJSTEN error=",.retl," error niunt=",er_count 
			GOTO listen
		END
	ELSE
		PRINT "TCP_LISTEN OK ",.retl
	END
	er_count =0 
accept:
	TCP_ACCEPT sock_id,port,60,ip[1]
	IF sock_id<0 THEN
		IF er_count >= 5 THEN
			PRINT "Connection with PC is failed (ACCEPT). Program is stopped."
 			TCP_END_LISTEN .ret,port 
			sock_id = -1
		ELSE
			er_count = er_count+1
			PRINT "TCP_ACCEPT error id=",sock_id," error count=",er_count 
			GOTO accept
		END
	ELSE
		PRINT "TCP_ACCEPT OK id=",sock_id
	END
exit:
	RETURN
.END

.PROGRAM send(.ret,.$data)	;Communication Sending data
	$send_buf[1] = .$data 
	buf_n = 1 
	TCP_SEND .sret,sock_id,$send_buf[1],buf_n,60 
	IF .sret < 0 THEN 
		PRINT "TCP_SEND error in SEND",.sret 
	ELSE
		PRINT "TCP_SEND OK in SEND",.sret
	END
.END

.PROGRAM recv() ;Communication Receiving data
	IF circle<>1 THEN
		TCP_RECV rret,sock_id,$recv_buf[1],.num,10,64
		IF rret<0 THEN
			;PRINT "TCP_RECV error in RECV",rret
		ELSE
			IF .num>0 THEN
				;PRINT "TCP_RECV OK in RECV",rret
				.flg = 0
				.pos = 1
				FOR .n = 1 TO .num
				$temp = $temp+$recv_buf[.n]
				;PRINT "TEMP: ",$temp,"|"
				;PRINT "BUF: ",$recv_buf[.n],"|"
				IF (LEN($temp)>=63) THEN
					.flg = 1
					FOR .i = 1 TO 9
						.$value = $DECODE($temp," ",0)
						.tmp[.i] = VAL(.$value)
						.$value = $DECODE($temp," ",1)
					END
					FOR .i = 1 TO 9
						buffer[.pos,.i] = .tmp[.i]
					END
					.pos = .pos+1
					;PRINT .tmp[1]," ",.tmp[2]," ",.tmp[3]," ",.tmp[4]," ",.tmp[5]," ",.tmp[6]," ",.tmp[7]," ",.tmp[8]," ",.tmp[9]
					IF .tmp[2]==c_stop THEN
						circle = 1;
						GOTO rec_exit
					END
					buffer[pos_write,1] = .tmp[1]
					buffer[pos_write,2] = .tmp[2]
					buffer[pos_write,3] = .tmp[3]
					buffer[pos_write,4] = .tmp[4]
					buffer[pos_write,5] = .tmp[5]
					buffer[pos_write,6] = .tmp[6]
					buffer[pos_write,7] = .tmp[7]
					buffer[pos_write,8] = .tmp[8]
					buffer[pos_write,9] = .tmp[9]
					pos_write = pos_write+1
					IF pos_write==10000 THEN
						pos_write = 1
					END
				END
			END
		END
	END
END
rec_exit:
.END

.PROGRAM close_socket();Closing communication
	PRINT "CLOSE_SOCEC_WORKS"
	TCP_CLOSE .ret,sock_id,5	;Normal socket closure
	IF .ret <0 THEN
		PRINT "TCP_CLOSE error ERROR=(",.ret,")",$ERROR(ret)
		TCP_CLOSE .ret1 ,sock_id	;Forced closure of socket (shutdown)
		IF ret < 0 THEN
			PRINT "TCP_CLOSE error id=",sock_id
		END
	ELSE
		PRINT "TCP_CLOSE OK id=",sock_id
	END
	TCP_END_LISTEN .ret,port 
	IF .ret < 0 THEN
		PRINT "TCP_CLOSE error id=",sock_id 
	ELSE
		PRINT "TCP_CLOSE OK id=",sock_id
	END
	RETURN
.END

