.PROGRAM main()
	C_STOP = 4
	C_J = 5
 	C_GetPositionAxis = 6
	buffer[1,1] = 0
	port = 40000
	tout_open = 60 
	tout_rec = 60
	$temp  = "";
	CALL open_socket	;Connecting communication
	IF sock_id < 0 THEN 
		GOTO exit_end 
	END
	text_id = 0 
	tout = 60 
	eret = 0 
	rret = 0
	netPos = 0
	circle = 0
	pcexecute 1: recv,-1
	posRead = 0;
	posWrite = 0;
	
	while 1==1 do
		if circle <> 0
			PRINT "Get exit command"	
			GOTO exit 
		else
			if pos_read <> pos_write then
		            .id   = buffer[pos_read,1]
		            .cmd  = buffer[pos_read,2]
		            .param = buffer[pos_read,3]
		            .vec1 = buffer[pos_read,4]
		            .vec2 = buffer[pos_read,5]
		            .vec3 = buffer[pos_read,6]
		            .vec4 = buffer[pos_read,7]
			    .vec5 = buffer[pos_read,8]
		            .vec6 = buffer[pos_read,9]
		 	    pos_read = pos_read + 1
    			    if pos_read == 10000 then
				pos_read = 1
			end
			call execution(.id,.cmd,.param,.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
        end
		end
	end;
exit:
	PRINT "Get exit"
	CALL close_socket
	PRINT "SOCEC_CLOSED"
	pcabort 1:
exit_end:
.END 

.PROGRAM execution(.id,.cmd,.param,.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
	case .cmd of
	value C_J:
		if (.param<=0) 
			.jspeed = 1
		else
			.jspeed = .param
		end
		if .vec1<>0
			DRIVE 1,.vec1,.jspeed   
		end
		if .vec2<>0
			DRIVE 2,.vec2,.jspeed
		end
		if .vec3<>0
			DRIVE 3,.vec3,.jspeed
		end
		if .vec4<>0
			DRIVE 4,.vec4,.jspeed
		end
		if .vec5<>0
			DRIVE 5,.vec5,.jspeed
		end
		if .vec6<>0
			DRIVE 6,.vec6,.jspeed
		end
	value C_GetPositionAxis:
		HERE .#p
		DECOMPOSE .arr[1]=.#p
		while sending_mode == 1 do
		end
		sending_mode = 1
		call sendstring(0,C_GetPositionAxis,0,.arr[1],.arr[2],.arr[3],.arr[4],.arr[5],.arr[6])
		sending_mode = 0
	any :
 		print "Number of command: ",.tmp[2]
	end
.END

.PROGRAM sendstring(.id,.cmd,.param,.vec1,.vec2,.vec3,.vec4,.vec5,.vec6)
;Fullen des Sendstrings und verschicken

	.$send_buf[1] = ""
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.id)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.cmd)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.param)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec1)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec2)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec3)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec4)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec5)+" "
	.$send_buf[1] = .$send_buf[1] + $ENCODE(/F6.0,.vec6)+" "
	.$send_buf[1] = .$send_buf[1] + $chr(13)

	.buf_n = 1
	.sret = 1
	TCP_SEND .sret,sock_id,.$send_buf[1],.buf_n,10
	IF .sret<0 THEN
		PRINT "Sending failed"
	END
	;twait 0.2
.END



.PROGRAM open_socket() ;Starting communicatin 
	er_count =0 
listen:
	TCP_LISTEN retl,port 
	IF retl<0 THEN
		IF er_count >= 5 THEN
			PRINT "Connection with PC is failed (LISTEN). Program is stopped." 
			sockjd = -1 
			goto exit 
		ELSE
			er_count = er_count+1
			PRINT "TCPJJSTEN error=",retl," error ñîunt=",er_count 
			GOTO listen
		END
	ELSE
		PRINT "TCP_LISTEN OK ",retl
	END
	er_count =0 
accept:
	TCP_ACCEPT sock_id,port,tout_open,ip[1]
	IF sock_id<0 THEN
		IF er_count >= 5 THEN
			PRINT "Connection with PC is failed (ACCEPT). Program is stopped."
 			TCP_END_LISTEN ret,port 
			sock_id = -1
		ELSE
			er_count = er_count+1
			PRINT "TCP_ACCEPT error id=",sock_id," error count=",er_count 
			GOTO accept
		END
	ELSE
		PRINT "TCP_ACCEPT OK id=",sock_id
	END
exit:
.END

.PROGRAM send(.ret,.$data)	;Communication Sending data
	$send_buf[1] = .$data 
	buf_n = 1 
	.ret = 1
	TCP_SEND sret,sock_id,$send_buf[1],buf_n,tout 
	IF sret < 0 THEN 
		.ret = -1
		PRINT "TCP_SEND error in SEND",sret 
	ELSE
		PRINT "TCP_SEND OK in SEND",sret
	END
.END
.PROGRAM recv() ;Communication Receiving data 
	if circle<>1
		TCP_RECV rret,sock_id,$recv_buf[1],.num,10,64
		IF rret < 0 THEN
			PRINT "TCP_RECV error in RECV",rret 
		ELSE
			IF .num > 0 THEN
				PRINT "TCP_RECV OK in RECV",rret 
				.flg = 0
				.pos = 1
				for .n = 1 to .num
					$temp = $temp + $recv_buf[.n]
 					if( len($temp)>=63)
						.flg = 1	
						for .i=1 to 9
        						.$value = $decode($temp," ",0)
        						.tmp[.i] = val(.$value)
 							.$value = $decode($temp," ",1)
						END
						for .i = 1 to 9
							buffer[.pos,.i] = .tmp[.i]
						end
						.pos = .pos +1
						print .tmp[1]," ",.tmp[2]," ",.tmp[3]," ",.tmp[4]," ",.tmp[5]," ",.tmp[6]," ",.tmp[7]," ",.tmp[8]," ",.tmp[9]
						if .tmp[2] == C_STOP
		 					circle = 1;
							GOTO rec_exit
						end
						buffer[pos_write,1] = .tmp[1] 
        					buffer[pos_write,2] = .tmp[2]
        					buffer[pos_write,3] = .tmp[3]
        					buffer[pos_write,4] = .tmp[4]
        					buffer[pos_write,5] = .tmp[5]
        					buffer[pos_write,6] = .tmp[6]
        					buffer[pos_write,7] = .tmp[7]
        					buffer[pos_write,8] = .tmp[8]
        					buffer[pos_write,9] = .tmp[9]
						pos_write = pos_write + 1
						if pos_write == 10000 then
							pos_write = 1
						end
					end
				end
			end
		END	
	end
rec_exit:
.END 

.PROGRAM close_socket();Closing communication
	PRINT "CLOSE_SOCEC_WORKS"
	TCP_CLOSE ret,sock_id,5	;Normal socket closure
	IF ret <0 THEN
		PRINT "TCP_CLOSE error ERROR=(",ret,")",$ERROR(ret)
		TCP_CLOSE ret1 ,sock_id	;Forced closure of socket (shutdown)
		IF ret < 0 THEN
			PRINT "TCP_CLOSE error id=",sock_id
		END
	ELSE
		PRINT "TCP_CLOSE OK id=",sock_id
	END
	TCP_END_LISTEN ret,port 
	IF ret < 0 THEN
		PRINT "TCP_CLOSE error id=",sock_id 
	ELSE
		PRINT "TCP_CLOSE OK id=",sock_id
	END
.END

